//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity updateBattleTimeEntity { get { return GetGroup(GameMatcher.UpdateBattleTime).GetSingleEntity(); } }
    public UpdateBattleTimeComponent updateBattleTime { get { return updateBattleTimeEntity.updateBattleTime; } }
    public bool hasUpdateBattleTime { get { return updateBattleTimeEntity != null; } }

    public GameEntity SetUpdateBattleTime(float newTimeValue) {
        if (hasUpdateBattleTime) {
            throw new Entitas.EntitasException("Could not set UpdateBattleTime!\n" + this + " already has an entity with UpdateBattleTimeComponent!",
                "You should check if the context already has a updateBattleTimeEntity before setting it or use context.ReplaceUpdateBattleTime().");
        }
        var entity = CreateEntity();
        entity.AddUpdateBattleTime(newTimeValue);
        return entity;
    }

    public void ReplaceUpdateBattleTime(float newTimeValue) {
        var entity = updateBattleTimeEntity;
        if (entity == null) {
            entity = SetUpdateBattleTime(newTimeValue);
        } else {
            entity.ReplaceUpdateBattleTime(newTimeValue);
        }
    }

    public void RemoveUpdateBattleTime() {
        updateBattleTimeEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public UpdateBattleTimeComponent updateBattleTime { get { return (UpdateBattleTimeComponent)GetComponent(GameComponentsLookup.UpdateBattleTime); } }
    public bool hasUpdateBattleTime { get { return HasComponent(GameComponentsLookup.UpdateBattleTime); } }

    public void AddUpdateBattleTime(float newTimeValue) {
        var index = GameComponentsLookup.UpdateBattleTime;
        var component = (UpdateBattleTimeComponent)CreateComponent(index, typeof(UpdateBattleTimeComponent));
        component.timeValue = newTimeValue;
        AddComponent(index, component);
    }

    public void ReplaceUpdateBattleTime(float newTimeValue) {
        var index = GameComponentsLookup.UpdateBattleTime;
        var component = (UpdateBattleTimeComponent)CreateComponent(index, typeof(UpdateBattleTimeComponent));
        component.timeValue = newTimeValue;
        ReplaceComponent(index, component);
    }

    public void RemoveUpdateBattleTime() {
        RemoveComponent(GameComponentsLookup.UpdateBattleTime);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherUpdateBattleTime;

    public static Entitas.IMatcher<GameEntity> UpdateBattleTime {
        get {
            if (_matcherUpdateBattleTime == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.UpdateBattleTime);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherUpdateBattleTime = matcher;
            }

            return _matcherUpdateBattleTime;
        }
    }
}
